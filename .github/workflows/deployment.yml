name: Deployment Activity

on:
  push:
    branches:
      - main
      - dev
    paths:
      - 'src/**'
  pull_request:
    types: [opened, closed]
  workflow_dispatch:
#  schedule:
#    - cron: "0 5 */30 * *"

#on:
#  push:
#    branches:
#      - main
#    paths
#      - 'src/**'
#  workflow_dispatch:
#  schedule:
#    - cron: "0 5 */30 * *"

env:
  cache-name: cache-node-modules
  DB_HOST: ${{ secrets.DB_HOST }}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build . --tag postgres:latest
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

      - name: Run a script
        run: echo "Hello, world!"

      - name: Get code
        uses: actions/checkout@v3

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-node-
#        env:
#          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Publish Static filenames
        run: find .next/static/media/* -type f -exec echo "::set-output name=media_filename::{}" ";";

      - name: Archive production artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            .next/*
            package.json

      - name: Get build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist-files

  env:
    DB_HOST: ${{ secrets.DB_HOST }}
    PORT: ${{ secrets.PROD_PORT }}

  test:
    runs-on: ubuntu-latest
#    container:
#      image: node:16
#      env:
#          DB_HOST: ${{ secrets.DB_HOST }}
#          PORT: ${{ secrets.PROD_PORT }}
    needs: build  # This ensures that the test job runs only after build completes
    env:
      DB_HOST: ${{ secrets.DB_HOST }}
      PORT: ${{ secrets.PROD_PORT }}
      POSTGRES_PASSWORD: example
    services:
      db:
        image: postgres
        restart: always
        environment:
          POSTGRES_PASSWORD: example
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Cache Test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-results
          path: ./test-results

      - name: Test outputs
        if: success()
        run: echo "TEST_RESULT=success" >> $GITHUB_ENV
        id: test_result

      - name: Output contents
        run: ls

      - name: Run tests
        run: echo "Testing the application..."

      - name: Output secrets
        run: echo ${{ secrets.DB_HOST }}


  deploy:
    runs-on: ubuntu-latest
    needs: test  # This ensures that the deploy job runs only after test completes
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Deploy
        run: echo "Deploying the application..."

#    notify:
#      needs: test
#      runs-on: ubuntu-latest
#      if: always()
#      steps:
#        - name: Use the result of Test
#          run: |
#            if [ "${{ needs.build_and_test.outputs.TEST_RESULT }}" == "success" ]; then
#              echo "Successfully on test!"
#            else
#              echo "Faild on test!"
#            fi

#jobs:
#  build:
#    runs-on: ubuntu-latest
#    strategy:
#      matrix:
#        node: [ 14, 16, 18 ]
#    name: Node ${{ matrix.node }} sample
#    steps:
#      - uses: actions/checkout@v3
#      - name: Setup node
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node }}
#      - run: npm ci